---
- hosts: 127.0.0.1
  order: sorted
  become: yes
  vars:
    DMC_INTERFACES: ['enp94s0.1312']
    DMC_FILEPATH: /DMC
    SINGULARITY_VERSION: 3.2.1
    OFED_VERSION: 4.6-1.0.1.1
    LSHW_OUTPUT_LOG: /tmp/dmc20-lshw.log
    TUNEDTN_OUTPUT_LOG: /tmp/dmc20-TuneDTN.log
    SCA20_FIO_OUTPUT_LOG: /tmp/dmc20-sca20-fio.log
    NETDATA_INSTALL_OUTPUT_LOG: /tmp/dmc20-netdata.log
    FIO_BENCHMARK: true

  pre_tasks:
    - name: Verify Ansible meets version requirements.
      assert:
        that: "ansible_version.full is version_compare('2.5', '>=')"
        msg: >
          "You must update Ansible to at least 2.5. Current version: {{ ansible_version.full }}.
           Please run with sudo privileges: # /bin/bash -c 'yum install -y epel-release && yum update -y  ansible' "

  handlers:
    - name: restart netdata
      systemd:
        name: netdata
        state: restarted

  tasks:
    - name: Update all packages
      yum:
        name: '*'
        state: latest

    - name: Update hosts file
      blockinfile:
        path: /etc/hosts
        block: |
          10.250.11.21 nscc01
          10.250.11.31 aarnet01
          10.250.11.41 geant01
          10.250.11.51 starlight01
          10.250.11.61 kisiti01
          10.250.11.71 nict01
          10.250.11.81 nii01
          10.250.11.91 surfnet01
          10.250.11.92 nordunet01
        backup: yes

    - name: Add DMC users
      user:
        name: "{{ item.username }}"
        password: "{{ item.password }}"
        state: present
        shell: /bin/bash
      with_items:
        - { username: "DMCUser01", password: "$6$DAvhic2Szhc1$BW3HJJyWetAzdd0SzqAfej.epSkHXa38NCuu4G1BuZgnMNuql02jy/W7/Mmwaan5/vUxroRoDzYtzD1SIhbdA." }
        - { username: "DMCUser02", password: "$6$DAvhic2Szhc1$qcOKV1rlF.lchIe5FSTZeuUTYdcMGnzcBSgg6eZx/xZr6x6TKPUeEljSGj4hkbCVvLFLmIH6UCVYD5yK6ryC7/" }
        - { username: "DMCUser03", password: "$6$DAvhic2Szhc1$uip.e8RRppG2LwH2A.sY0o.mT32yamPYvP6ukedOBXETW2BYm3CkEMFR/fDLtMfdEeraJ25pP4TxqZHeAIc6C1" }
        - { username: "DMCUser04", password: "$6$DAvhic2Szhc1$owdTSimbuLvdohxe2.CLXZJqO4bEab7pMyhDWj/1VqsFr7Pbi7z8TVmtjtxECrekJ8JkwU9lMyb2M63fA.OgC0" }
        - { username: "DMCUser05", password: "$6$DAvhic2Szhc1$GONYL/WHxM6Mt6V2YNPeVtfVdE1mKnNKRKkuGhYWIDZoczXQwR53/ihhmFQxoncyhScfPzg4PsbDKgVDfug2X0" }
        - { username: "DMCUser06", password: "$6$DAvhic2Szhc1$fpmO035iA5nn4GCvsp2cLJP0WtU.h0WqLQBGh9ObGO4FuNlfwrZuBahB6divE.Pec93N/QU0L5FlWVwqg.KL50" }
        - { username: "DMCUser07", password: "$6$DAvhic2Szhc1$jKI4sEi10ijnnn3qM/lnp/pIJpJZHplP68rEnJ1gTnn8sAdgmtmXTp7.Y0/eFlc2vUcoIz1bh0kTK6DVsTTSs0" }
        - { username: "DMCUser08", password: "$6$DAvhic2Szhc1$/dJkFk4gcdhSbYTmbjMf2WPFkekVw3P5RrzKPlHuSMEXqrSg6tkx7K6idbF2cIONM8iib/LCTRfjtV3OKavXg." }
        - { username: "DMCUser09", password: "$6$DAvhic2Szhc1$I6ZdqfYriKCXoIK8NtBWNshfm5Ap5PNVOiDEM.zviCI8TNy9baJuAt7BpaeZOt9sxbJfQnLkq5vq7KEvEcdIK0" }
        - { username: "DMCUser10", password: "$6$DAvhic2Szhc1$cGwvquW9PiYuJQM9iHavpYg1/D9XlOUguJt51LLExyTlBrvq3EsEHaNKsDoy0LBLKOQmpKT6BlspmVnGLI7NC0" }
        - { username: "DMCUser11", password: "$6$DAvhic2Szhc1$qNSnN0AXroUiMFss8LHLrsJL9NbDeCjWO760W6si6wl3XsyNCirnhqhxF654ErUtd6zrtVHc8UAu2GCxTNrSR." }
        - { username: "DMCUser12", password: "$6$DAvhic2Szhc1$ntpL7EZpTelumwQer8C6sgquxOrWB5eteh4vboEEPieQGJhUHFI4/duod3ZZDKL/XbtjR0VZ6VFthRN33gJ6v0" }
        - { username: "DMCUser13", password: "$6$DAvhic2Szhc1$J8llllsbe38CzzJ38Ogzh/G6xhAAoLIYlicJMCKhyjlFXONRYRCFPZ8BOWXyg5ftuLHBSOHC6ADmsu2q/BWRq0" }
        - { username: "DMCUser14", password: "$6$DAvhic2Szhc1$0Naaf8uMhLVVQQ9MgFziA95ForLaKPK1U5q2CdjNZgjmDNRy6lwHYEfXIb5hT6wQg0.XxkL1f5hlO1riel9Pf/" }
        - { username: "DMCUser15", password: "$6$DAvhic2Szhc1$2DC39fmM.KRwR2nd6pfUI2Sykz5vIblY8BOf854NUqYfnnGDusXETthx4qr.KZSL1fZbxJZ/XUPkvk6HoB/ag0" }

    # Annex A - iperf3 and Singularity installation
    - name: Annex A - Install iperf3
      yum:
        name: iperf3
        state: present

    - name: Annex A - Install epel-release repo as it contains Singularity v3.2
      yum:
        name: "epel-release"
        state: present

    - set_fact:
        expected_singularity_version: "{{ SINGULARITY_VERSION }}"

    - name: Annex A - Install CentOS Development Tools
      yum:
        name: "@Development tools"
        state: latest

    - name: Annex A - Retrieve Singularity pre-requisites including Golang
      yum:
        name:
          - openssl-devel
          - libuuid-devel
          - libseccomp-devel
          - wget
          - squashfs-tools
          - golang
        state: latest

    - name: Annex A - Install Go dependency for Singularity
      shell: go get -u github.com/golang/dep/cmd/dep
      args:
        executable: /bin/bash

    - name: Annex A - Check Singularity existence
      stat:
        path: /usr/bin/singularity
      register: singularity

    - name: Annex A - Check Singularity version if exists
      shell: "{{ singularity.stat.path }} version"
      when: singularity.stat.exists == True
      register: singularity_version

    - name: "Annex A - Remove Singularity if not v{{ SINGULARITY_VERSION }}"
      yum:
        name: singularity
        state: absent
      when: singularity.stat.exists == True and singularity_version.stdout.find(expected_singularity_version) == -1

    - name: "Annex A - Download Singularity v{{ SINGULARITY_VERSION }} Release package"
      get_url:
        url: "https://github.com/sylabs/singularity/releases/download/v{{ SINGULARITY_VERSION }}/singularity-{{ SINGULARITY_VERSION }}.tar.gz"
        dest: /tmp
      register: singularity_download

    - name: "Annex A - Install Singularity v{{ SINGULARITY_VERSION }} via RPM"
      shell: |
        rpmbuild -tb {{ singularity_download.dest }}
        rpm -ivh ~/rpmbuild/RPMS/x86_64/singularity-{{ SINGULARITY_VERSION }}-1.el7.x86_64.rpm
      args:
        executable: /bin/bash
      when: singularity.stat.exists == False or singularity_version.stdout.find(expected_singularity_version) == -1

    - name: Annex A - Clean up after Singularity installation
      file:
        path: "{{ item }}"
        state: absent
      with_items:
        - "{{ singularity_download.dest }}"
        - ~/rpmbuild

    # Annex B - Kernel Parameter Tuning
    - name: Annex B - Tune sysctl parameters
      sysctl:
        name: "{{ item.name }}"
        value: "{{ item.value }}"
        state: present
        reload: yes
      with_items:
        - { name: 'net.ipv4.tcp_congestion_control', value: 'htcp' }
        - { name: 'net.ipv4.tcp_mtu_probing', value: '1' }
        - { name: 'net.core.rmem_max', value: '2147483647' }
        - { name: 'net.core.wmem_max', value: '2147483647' }
        - { name: 'net.ipv4.tcp_rmem', value: '4096 87380 2147483647' }
        - { name: 'net.ipv4.tcp_wmem', value: '4096 65536 2147483647' }
        - { name: 'net.core.default_qdisc', value: 'fq' }
        - { name: 'net.ipv4.conf.default.rp_filter', value: '0' }
        - { name: 'net.ipv4.conf.all.rp_filter', value: '0' }
        - { name: 'net.ipv4.ip_forward', value: '0' }


    # Annex C - 100G Interface Tuning
    - name: Annex C - Install pre-requisite packages for interface tuning
      yum:
        name:
          - pciutils
          - libnl3-devel
          - ethtool
          - python34-pip
          - python34-devel
          - python-setuptools
          - gcc
          - perl
          - "kernel-devel-{{ ansible_kernel }}"
          - python-devel
          - lsof
          - redhat-rpm-config
          - rpm-build
          - gtk2
          - atk
          - cairo
          - tcl
          - gcc-gfortran
          - tcsh
          - tk
        state: present

    - name: Annex C - Check if mlnx_tune package exists
      stat:
        path: /usr/sbin/mlnx_tune
      register: mlnx_tune

    - name: Annex C - Download Mellanox OFED Package
      get_url:
        url: "http://www.mellanox.com/downloads/ofed/MLNX_OFED-{{ OFED_VERSION }}/MLNX_OFED_LINUX-{{ OFED_VERSION }}-rhel7.6-x86_64.tgz"
        dest: /tmp/MLNX_OFED_LINUX-{{ OFED_VERSION }}-rhel7.6-x86_64.tgz
        checksum: md5:acd31f33f332ee87d622cb7015fb551c
      register: ofed_download
      when: mlnx_tune.stat.exists == False

    - name: Annex C - Unarchive Mellanox OFED Pacakage
      unarchive:
        src: "{{ ofed_download.dest }}"
        dest: /tmp
        list_files: yes
      register: ofed_fp
      when: mlnx_tune.stat.exists == False

    - name: Annex C - Compile and Install Mellanox OFED
      shell: "{{ ofed_fp.dest }}/{{ ofed_fp.files[0].split('/')[1] }}/mlnxofedinstall  --kernel-sources /usr/src/kernels/{{ ansible_kernel }} --add-kernel-support --skip-repo"
      when: mlnx_tune.stat.exists == False

    - name: Annex C - Clean up after Mellanox OFED installation
      file:
        path: "{{ ofed_download.dest }}"
        state: absent
      when: mlnx_tune.stat.exists == False

    - name: Annex C - Install ethtool kernel interface
      pip:
        name:
          - ethtool
          - pyroute2
#        extra_args:  --trusted-host pypi.org --trusted-host files.pythonhosted.org
        state: latest
        executable: pip3.4

    - name: Annex C - Retrieve TuneDTN.py.j2 script template
      get_url:
        url: "https://raw.githubusercontent.com/SingAREN/Data-Mover-Challenge/master/ansible-playbook/templates/TuneDTN.py.j2"
        dest: /tmp
        checksum: sha256:d6dfe94d15b26b9adbc761e154862400135c9343e9fbaf45f4a29b0dbbc4301d
      register: tunedtn_template

    - name: Annex C - Create TuneDTN.py from template
      template:
        src: "{{ tunedtn_template.dest }}"
        dest: /tmp/dmc20-script-TuneDTN.py
        mode: 0644
      register: tunedtn_script

    - name: Annex C - Run TuneDTN.py
      shell: python3.4 {{ tunedtn_script.dest|quote }}
      register: tunedtn

    - name: Annex C - Save TuneDTN output
      copy:
        content: "{% for line in tunedtn.stdout_lines %}{{line}}\n{% endfor %}"
        dest: "{{ TUNEDTN_OUTPUT_LOG }}"

    - debug: var=tunedtn.stdout_lines


    # Annex D - FIO Storage Benchmarking

    - name: Annex D - Install fio
      yum:
        name: fio
        state: present
      when: FIO_BENCHMARK 

    - name: Annex D - Retrieve disk benchmarking template - sca20-fio.sh.j2
      get_url:
        url: "https://raw.githubusercontent.com/SingAREN/Data-Mover-Challenge/master/ansible-playbook/templates/sca20-fio.sh.j2"
        dest: /tmp
        checksum: sha256:16795ab67b89a6284fad7568efb57ab2ffd8fb303a585c8aab64d1e2f665d3a7
        mode: 0644
      register: fio_template
      when: FIO_BENCHMARK

    - name: Annex D - Create sca20-fio.sh from template
      template:
        src: "{{ fio_template.dest }}"
        dest: /tmp/dmc20-script-sca20-fio.sh
        mode: 0755
      register: fio_script
      when: FIO_BENCHMARK

    - name: Annex D - Run sca20-fio.sh
      shell: "{{ fio_script.dest }}"
      args:
        executable: /bin/bash
      register: fio
      when: FIO_BENCHMARK

    - name: Annex D - Clean up after sca20-fio.sh
      file:
        path: "{{ DMC_FILEPATH }}/FIO"
        state: absent
      when: FIO_BENCHMARK

    - name: Annex D - Save sca20-fio.sh output
      copy:
        content: "{% for line in fio.stdout_lines %}{{line}}\n{% endfor %}"
        dest: "{{ SCA20_FIO_OUTPUT_LOG }}"
      when: FIO_BENCHMARK


    - debug: var=fio.stdout_lines

 
    # Annex E - lshw
    - name: Annex E - Install lshw
      yum:
        name: lshw
        state: present

    - name: Annex E - Run lshw
      shell: lshw
      register: lshw

    - name: Annex E - Save lshw output
      copy:
        content: "{% for line in lshw.stdout_lines %}{{line}}\n{% endfor %}"
        dest: "{{ LSHW_OUTPUT_LOG }}"

    - debug: var=lshw.stdout_lines


    ##################################
    # Netdata                        #
    # Installation and Configuration #
    ##################################
    - name: Check if netdata exists
      stat:
        path: /usr/sbin/netdata
      register: netdata

    - name: Retrieve netdata installation script
      get_url:
        url: "https://raw.githubusercontent.com/SingAREN/Data-Mover-Challenge/master/ansible-playbook/additional_scripts/netdata-kickstart.sh"
        dest: /tmp/kickstart.sh
        checksum: sha256:4d202ddae3831d54743b333780b425de879adb1087882a048503169d39afc876
      when: netdata.stat.exists == false

    - name: Install netdata
      shell:  "/bin/sh /tmp/kickstart.sh --non-interactive --stable-channel"
      when: netdata.stat.exists == false
      register: netdata_install

    - name: Modify netdata.conf to filter relevant parameters for Prometheus
      replace:
        path: /etc/netdata/netdata.conf
        regexp: '# send charts matching = \*'
        replace: 'send charts matching = system.cpu system.ram net.* disk.*'
        backup: yes
      notify: restart netdata

    - name: Save netdata install output
      copy:
        content: "{% for line in netdata_install.stdout_lines %}{{line}}\n{% endfor %}"
        dest: "{{ NETDATA_INSTALL_OUTPUT_LOG }}"
      when: netdata.stat.exists == false

    - name: Add DMC interface to the trusted zone in firewalld
      firewalld:
        zone: trusted
        interface: "{{ item }}"
        permanent: yes
        immediate: yes
        state: enabled
      with_items:
        - "{{ DMC_INTERFACES }}"

